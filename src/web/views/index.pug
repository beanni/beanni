extends layout

block content
    h1 Beanni
    p
        | Your friendly Australian bean-counter.
        |
        a(href='https://www.youtube.com/watch?v=Aey_zIE3K9E') His name was Beanni!
        |  üé∂

    if staleNonZeroBalances.length > 0
        h2 ‚ö†Ô∏è Data Issues
        p These issues might effect integrity of reporting:
        ul
            each balance in staleNonZeroBalances
                li "#{balance.label}" was last updated #{balance.asAt}. It has a non-zero balance, which is now stale.

    h2 üê∂ Fetch
    form(action='/fetch', method='post')
      p
        button(type='submit') Fetch Now

    h2 üí∞ Net Wealth
    p #{netWealth.toLocaleString('en', { style: 'currency', currency: 'AUD' })}

    h2 üìÖ Performance by Period
    table.performanceByPeriod
        thead
            tr
                th(colspan=2) CY
                each quarterNumber in ['Q1', 'Q2', 'Q3', 'Q4']
                    th #{quarterNumber}
        tbody
            each year in performanceByPeriods.years
                tr
                    th #{year.year} #{year.incompletePeriod ? "*" : ""}
                    td(
                        class=(year.performancePercentage < 0 ? 'negative-result' : 'positive-result')
                    )
                        | #{year.performancePercentage>0?'+':''}#{year.performancePercentage.toLocaleString(undefined,{style: 'percent'})}
                        br
                        | #{year.performancePercentage>0?'+':''}#{(year.performanceAbsolute/1000).toFixed(0).toLocaleString()}k
                        | #{year.incompletePeriod ? "*" : ""}
                    each quarterNumber in ['Q1', 'Q2', 'Q3', 'Q4']
                        - let quarter = year.quarters.find(q => q.quarter === quarterNumber)
                        if quarter
                            td(class=(quarter.performancePercentage < 0 ? 'negative-result' : 'positive-result'))
                                | #{quarter.performancePercentage>0?'+':''}#{quarter.performancePercentage.toLocaleString(undefined,{style: 'percent'})}
                                br
                                | #{quarter.performancePercentage>0?'+':''}#{(quarter.performanceAbsolute/1000).toFixed(0).toLocaleString()}k
                                | #{quarter.incompletePeriod ? "*" : ""}
                        else
                            td

    h2 üìà Balances
    div.chart
        canvas#balanceHistoryChart
    table#balanceHistoryLegend
        thead
            tr
                th(scope='col').checkbox
                    input#balanceHistoryLegendToggleAll(type='checkbox', checked='checked')
                th(scope='col').label
                    label(for='balanceHistoryLegendToggleAll') All Accounts
                th(scope='col').balance Balance
        tbody
            - var currentValueType = 0
            each balance, index in latestBalances
                unless balance.valueType === currentValueType
                    - currentValueType = balance.valueType
                    tr.valueTypeHeader
                        th(scope='row').checkbox
                        th(scope='row', colspan=2).label #{balance.valueTypeName}
                tr
                    th(scope='row').checkbox
                        input(type='checkbox', id='balanceHistoryLegendToggle' + index, data-index=index, data-balance=balance.balance, data-value-type=balance.valueType, checked='checked')
                    th(scope='row').label
                        label(for='balanceHistoryLegendToggle' + index)
                            canvas(id='balanceHistoryPattern-' + index, width=30, height=15)
                            | #{balance.label}
                        if balance.asAtDaysAgo > 1
                            span.asAt
                                = ' as at ' + balance.asAt
                    td.balance
                        | #{balance.balance.toLocaleString('en', { style: 'currency', currency: 'AUD' })}
        tfoot
            tr
                td.checkbox
                th(scope='col').label Total
                td.balance #{ latestBalances.reduce((acc, val) => acc + val.balance, 0).toLocaleString('en', { style: 'currency', currency: 'AUD' }) }
    script.
        (function() {
            var sourceData = !{JSON.stringify(balanceHistoryChartData)};

            // https://mode.com/blog/custom-color-palettes/
            const seriesColors = [
                '#4cb064',
                '#bfe2ab',
                '#6996be',
                '#e8b300',
                '#ebd39a',
                '#e36570',
                '#e8a7a6',
                '#9e8caf',
                '#d0cadc',
                '#8ad7c1',
                '#c1f2d4',
                '#3f6c73',
                '#84b8b9',
                '#e89dcd',
                '#eec9dd',
                '#db7800',
                '#fabf94',
                '#9c765c',
                '#d8c1b0',
            ];
            var seriesColorIndex = 0;

            Chart.defaults.defaultFontSize = 14;

            // Only show tooltips when we've got enough space
            const checkTooltipsEnabled = () => window.visualViewport.width >= 1000;

            var chart = new Chart('balanceHistoryChart', {
                type: 'line',
                data: {
                    labels: sourceData.labels.map(l => new Date(l)),
                    datasets: sourceData.datasets.map(d => {
                        d.backgroundColor = seriesColors[seriesColorIndex++ % seriesColors.length];
                        d.fill = true;
                        const lessThanAMonthOfDataToShow = d.data.length < 30;
                        d.showLine = lessThanAMonthOfDataToShow;
                        d.pointStyle = lessThanAMonthOfDataToShow;
                        return d;
                    }),
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                        },
                        tooltip: {
                            // Display tooltip for the whole day, not specific account
                            mode: 'index',

                            // Hover anywhere in the column, not just on a specific data point
                            intersect: false,

                            // Only display accounts with balances on the day
                            filter: (tooltipItem) => checkTooltipsEnabled() && !isNaN(tooltipItem.raw) && tooltipItem.raw !== null,

                            // List balances highest to lowest
                            itemSort: (a, b) => b.raw - a.raw,

                            callbacks: {
                                beforeBody: function(tooltipItem, data) {
                                    // Short circuit if we're not showing tooltips
                                    if (!checkTooltipsEnabled()) return null;

                                    // Display the day's net wealth at the top of the tooltip
                                    var dayTotal = tooltipItem.reduce((accumulator, currentValue) => accumulator + currentValue.raw, 0);
                                    return dayTotal.toLocaleString('en', { style: 'currency', currency: 'AUD' });
                                },
                                label: function(tooltipItem) {
                                    // Show values as currency-formatted
                                    return tooltipItem.dataset.label +
                                        ': ' +
                                        tooltipItem.raw.toLocaleString('en', { style: 'currency', currency: 'AUD' });
                                }
                            }
                        },
                    },
                    scales: {
                        x: {
                            stacked: true,
                            type: 'time',
                            time: {
                                unit: 'month',
                                tooltipFormat: 'yyyy-MM-DD',
                            }
                        },
                        y: {
                            stacked: true,
                            ticks: {
                                callback: function(value, index, values) {
                                    var isNegative = value < 0;
                                    var absoluteValue = Math.abs(value);
                                    if (value === 0) {
                                        return '0';
                                    }
                                    else if (absoluteValue >= 1000000 && absoluteValue % 10000 === 0) {
                                        // A$1.25m
                                        return (isNegative ? '-' : '') + 'A$' + (absoluteValue / 1000000).toLocaleString() + 'm';
                                    }
                                    else if (absoluteValue >= 1000 && absoluteValue % 1000 === 0) {
                                        // A$820k, A$15k, A$4k
                                        return (isNegative ? '-' : '') + 'A$' + (absoluteValue / 1000).toLocaleString() + 'k';
                                    }
                                    return value.toLocaleString('en', { style: 'currency', currency: 'AUD' });
                                }
                            }
                        }
                    },
                }
            });

            sourceData.datasets.map((d, index) => {
                // Draw the patterns in the legend
                var canvas = document.getElementById('balanceHistoryPattern-' + index);
                var context = canvas.getContext("2d");
                context.rect(0, 0, canvas.width, canvas.height);
                context.fillStyle = seriesColors[index % seriesColors.length];
                context.fill();
            });

            document.getElementById('balanceHistoryLegend').addEventListener('change', event => {
                // Toggle series on and off as checkboxes are tapped
                if (!event.target.matches('input[type=checkbox]')) return;
                var index = event.target.dataset.index;

                const toggleAllCheckbox = document.querySelector('#balanceHistoryLegend input[type=checkbox]:not([data-index])');
                const allSeriesCheckboxes = Array.from(document.querySelectorAll('#balanceHistoryLegend input[type=checkbox][data-index]'));

                if (event.target === toggleAllCheckbox) {
                    // Toggle all
                    chart.data.datasets.forEach((dataset, index) => {
                        var meta = chart.getDatasetMeta(index);
                        meta.hidden = !event.target.checked;
                        var checkbox = document.querySelector('#balanceHistoryLegend input[type=checkbox][data-index="' + index + '"]');
                        checkbox.checked = event.target.checked;
                    });
                }
                else {
                    // Toggle single series
                    var meta = chart.getDatasetMeta(index);
                    meta.hidden = !event.target.checked;

                    // Update the toggle-all status
                    toggleAllCheckbox.checked = allSeriesCheckboxes.every(c => c.checked);
                }
                chart.update();

                // Update balance
                const checkedBalance = allSeriesCheckboxes
                    .filter(c => c.checked)
                    .reduce((acc, c) => acc + Number.parseFloat(c.dataset.balance), 0);
                const formattedBalance = checkedBalance.toLocaleString('en', { style: 'currency', currency: 'AUD' });
                document.querySelector('#balanceHistoryLegend tfoot tr > .balance').innerText = formattedBalance;
                document.querySelector('#balanceHistoryLegend tfoot tr > .label').innerText = toggleAllCheckbox.checked ? 'Total' : 'Total (selected)';
            });

            // Hide loans and mortgaged assets by default as they cancel each other out,
            // and often make the time series chart very hard to read
            const valueTypesHiddenByDefault = [300];
            Array.from(document.querySelectorAll('#balanceHistoryLegend input[type=checkbox][data-index][data-value-type]'))
                .filter(c => valueTypesHiddenByDefault.includes(parseInt(c.dataset.valueType)))
                .forEach(c => {
                    c.checked = false;
                    c.dispatchEvent(new Event('change', {bubbles: true}));
                });
        })();
